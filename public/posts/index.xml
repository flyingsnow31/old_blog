<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Flying Snow Blog</title>
    <link>https://flyingsnow31.github.io/posts/</link>
    <description>Recent content in Posts on Flying Snow Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 26 Nov 2022 14:30:58 +0800</lastBuildDate><atom:link href="https://flyingsnow31.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lab1 Utilities</title>
      <link>https://flyingsnow31.github.io/posts/oslab/lab1-utilities/</link>
      <pubDate>Sat, 26 Nov 2022 14:30:58 +0800</pubDate>
      
      <guid>https://flyingsnow31.github.io/posts/oslab/lab1-utilities/</guid>
      <description>本实验用于熟悉xv6和系统调用
Boot xv6(easy) 启动xv6系统
首先下载mit提供的针对此次实验设计的xv6版本，而非整体的xv6
$ git clone git://g.csail.mit.edu/xv6-labs-2020 Cloning into &amp;#39;xv6-labs-2020&amp;#39;... ... $ cd xv6-labs-2020 $ git checkout util Branch &amp;#39;util&amp;#39; set up to track remote branch &amp;#39;util&amp;#39; from &amp;#39;origin&amp;#39;. Switched to a new branch &amp;#39;util&amp;#39; 在这一步可以将其远程库切换成自己的。
使用 make qemu 指令编译并通过qemu启动xv6
make qemu riscv64-unknown-elf-gcc -c -o kernel/entry.o kernel/entry.S riscv64-unknown-elf-gcc -Wall -Werror -O -fno-omit-frame-pointer -ggdb -DSOL_UTIL -MD -mcmodel=medany -ffreestanding -fno-common -nostdlib -mno-relax -I. -fno-stack-protector -fno-pie -no-pie -c -o kernel/start.o kernel/start.</description>
    </item>
    
    <item>
      <title>6.S081安装</title>
      <link>https://flyingsnow31.github.io/posts/oslab/6.s081%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%AE%89%E8%A3%85/</link>
      <pubDate>Fri, 25 Nov 2022 18:26:46 +0800</pubDate>
      
      <guid>https://flyingsnow31.github.io/posts/oslab/6.s081%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%AE%89%E8%A3%85/</guid>
      <description>简介 整体实验介绍 6.S081即MIT原来的6.828，在20年后，此课程改为本科生修的6.S081和研究生修的6.828两部分，其中，6.S081与原本的实验更为相似，但难度有所降低，同时修改了部分实验的要求，研究生上的6.828则更加带有研究的意味。
整个实验分为十个lab，将逐步补充并实现一个操作系统xv6
xv6介绍 Xv6是由麻省理工学院(MIT)为操作系统工程的课程（代号6.828）,开发的一个教学目的的操作系统。Xv6是在x86处理器上(x即指x86)用ANSI标准C重新实现的Unix第六版(Unix V6，通常直接被称为V6)。
近几年，MIT将其在RISC-V精简指令集上重新实现了XV6，并以此作为6.S081的实验操作系统使用，原有基于x86的系统不再更新。
官方文档 https://pdos.csail.mit.edu/6.828/2020/tools.html
安装过程 系统环境 使用WSL Ubuntu2004进行 对于WSL安装到指定位置问题，可以查看之前的文章。 这里建议如果使用Ubuntu系统，使用2004版本，过高或过低都可能存在riscv的安装问题，而其交叉编译工具下载很慢，且不容易切换源。
安装 完成更换源等一系列初始步骤后，执行如下命令，安装一些软件
sudo apt-get install git build-essential gdb-multiarch qemu-system-misc gcc-riscv64-linux-gnu binutils-riscv64-linux-gnu 注意，如果使用Ubuntu20，由于qemu的一次更新，可能会与此次实验用到的xv6系统产生冲突，需要卸载，并重新安装指定的旧一些的版本。
sudo apt-get remove qemu-system-misc sudo apt-get install qemu-system-misc=1:4.2-3ubuntu6 接下来安装qemu的5.1版本
wget https://download.qemu.org/qemu-5.1.0.tar.xz tar xf qemu-5.1.0.tar.xz cd qemu-5.1.0 ./configure --disable-kvm --disable-werror --prefix=/usr/local --target-list=&amp;#34;riscv64-softmmu&amp;#34; make sudo make install 测试安装 执行如下几步，测试安装的版本是否正确
riscv64-unknown-elf-gcc --version riscv64-unknown-elf-gcc (GCC) 10.1.0 ... qemu-system-riscv64 --version QEMU emulator version 5.1.0 在此，由于ubuntu的源版本，安装的 riscv64-unknown-elf-gcc 版本为9，由于可以正常使用，并不再重新安装，如有安装10.1版本的需求，可参考如下操作</description>
    </item>
    
    <item>
      <title>WSL指定位置安装</title>
      <link>https://flyingsnow31.github.io/posts/wsl%E6%8C%87%E5%AE%9A%E4%BD%8D%E7%BD%AE%E5%AE%89%E8%A3%85/</link>
      <pubDate>Fri, 25 Nov 2022 15:23:39 +0800</pubDate>
      
      <guid>https://flyingsnow31.github.io/posts/wsl%E6%8C%87%E5%AE%9A%E4%BD%8D%E7%BD%AE%E5%AE%89%E8%A3%85/</guid>
      <description>起因 通过微软商店或WSL &amp;ndash;install安装的WSL会安装在C盘，如果需要安装在其他盘，有如下方法。
安装时指定 安装包下载 旧版 WSL 的手动安装步骤 | Microsoft Learn
以上为微软官网的WSL地址，需要通过下载手动安装包进行，页面往下，找到
{% asset_img image-20221124191507919.png 安装包 %}
选择一个需要的系统下载即可，这里以Ubuntu20.04为例。
处理安装包 下载下来的安装包一般为 .appx 文件
{% asset_img image-20221124193903526.png appx %}
将其后缀修改为 .zip 或者直接使用压缩软件打开
{% asset_img image-20221124193948318.png zip%}
将其解压缩到指定安装位置的地方
安装 运行 .exe 文件，执行安装过程即可。
原理 安装后会发现一个 .vhdx 文件被创建在了之前解压指定的文件夹内
这个就是WSL的虚拟磁盘文件，也就是说，WSL被安装到了指定位置。</description>
    </item>
    
    <item>
      <title>搭建Hexo</title>
      <link>https://flyingsnow31.github.io/posts/%E6%90%AD%E5%BB%BAhexo/</link>
      <pubDate>Fri, 25 Nov 2022 15:23:28 +0800</pubDate>
      
      <guid>https://flyingsnow31.github.io/posts/%E6%90%AD%E5%BB%BAhexo/</guid>
      <description>前言 在这次hexo的第一篇就记录一下hexo的搭建过程，不得不说，npm就算换源下载也好慢。
官网Hexo
基于nodejs和npm，所以要确保系统中安装了这些。
npm安装配置 npm安装 Node.js (nodejs.org)
$ node -v v12.22.9 $ npm -v 8.5.1 npm换源 # 淘宝源 npm config set registry https://registry.npmmirror.com/ # 腾讯源 npm config set registry http://mirrors.cloud.tencent.com/npm/ 查看当前镜像
npm config get registry 官方镜像
npm config set registry https://registry.npmjs.org 或者使用 nrm 以及 cnpm ，都是一个类似的过程。
hexo安装配置 全局安装hexo
npm install -g hexo-cli </description>
    </item>
    
    <item>
      <title>写在前面</title>
      <link>https://flyingsnow31.github.io/posts/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2/</link>
      <pubDate>Fri, 25 Nov 2022 14:51:19 +0800</pubDate>
      
      <guid>https://flyingsnow31.github.io/posts/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2/</guid>
      <description>大学的时候陆陆续续搞过几次博客，wordpress有，hexo有，稀土掘金，csdn都有，但后面也都没有再继续下去。
读研以来，深感一个文档的重要性，对于一些重复性的工作，往复的找看过无数遍的文档属实浪费时间精力，同时也为了记录一下自己的研究生乃至以后的工作生活。
重新开始使用hexo搭建博客，这一次，也不讲究过多主题花样，将注意力集中于文字内容上，并坚持下去。
注 然后现在切换成了Hugo，hhh</description>
    </item>
    
  </channel>
</rss>
